[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Post(BaseModel):\n    title: str\n    content: str\n    # published of type boolean with default value of true.\n    # whether this is provided in the body or not.\n    # hence it is also optional field.\n    published: bool = True\n    # Optional int field of default value None\n    # to create optional fields, we need to create default values.\n    rating: Optional[int] = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "find_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def find_post(id):\n    for post in my_posts:\n        if post['id'] == id:\n            return post\ndef find_post_index(id):\n    for index, post in enumerate(my_posts):\n        if post['id'] == id:\n            return index\n# the order of path operations matter.\n# this is like the homepage",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "find_post_index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def find_post_index(id):\n    for index, post in enumerate(my_posts):\n        if post['id'] == id:\n            return index\n# the order of path operations matter.\n# this is like the homepage\n# out http get method\n@app.get('/')\ndef root():\n    return {\"message\": \"Faisal's API\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def root():\n    return {\"message\": \"Faisal's API\"}\n# get all posts\n@app.get('/posts')\ndef get_posts():\n    return {\"data\": my_posts}\n# this function should come before...\n# /posts/{id}\n# the order of functions throughly matters\n@app.get('/posts/latest')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_posts():\n    return {\"data\": my_posts}\n# this function should come before...\n# /posts/{id}\n# the order of functions throughly matters\n@app.get('/posts/latest')\ndef get_latest():\n    post = my_posts[len(my_posts)-1]\n    return {'data': post}\n# getting a single post",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_latest",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_latest():\n    post = my_posts[len(my_posts)-1]\n    return {'data': post}\n# getting a single post\n# id: int (was done to convert post to integer.)\n@app.get('/posts/{id}')\ndef get_post(id: int, response: Response):\n    # the id is given as str...\n    # we shouldn't forget to convert to int.\n    post = find_post(id)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_post(id: int, response: Response):\n    # the id is given as str...\n    # we shouldn't forget to convert to int.\n    post = find_post(id)\n    if not post:\n        # if post is null\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id: {id}, was not found\")\n    return {\"post_detail\": post}\n# the name of the function never matters.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def create_post(post: Post):\n    # convert pydantic model to dictionary\n    post_dict = post.dict()\n    # assign a random id between 0 and 1 million\n    post_dict['id'] = randrange(0, 1000000)\n    # save the new post to memory\n    my_posts.append(post_dict)\n    # return the new post to the user.\n    print(my_posts)\n    return {\"data\": post_dict}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def delete_post(id: int):\n    # deleting post\n    post_index = find_post_index(id)\n    if not post_index:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f'Post with id {id} does not exist!')\n    print(post_index)\n    my_posts.pop(post_index)\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# we want to force to force the user to send the data in a schema that we expect.\n# to create that schema, we need pydantic\nclass Post(BaseModel):\n    title: str\n    content: str\n    # published of type boolean with default value of true.\n    # whether this is provided in the body or not.\n    # hence it is also optional field.\n    published: bool = True",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "my_posts",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "my_posts = [{\"title\": \"Top Beaches in Lasgidi\", \"content\": \"Check out these awesome beaches\", \"id\": 1}, \\\n    {\"title\": \"Favourite Foods\", \"content\": \"I like pizza\", \"id\": 2}]\ndef find_post(id):\n    for post in my_posts:\n        if post['id'] == id:\n            return post\ndef find_post_index(id):\n    for index, post in enumerate(my_posts):\n        if post['id'] == id:\n            return index",
        "detail": "main",
        "documentation": {}
    }
]